import numpy as np
import pandas as pd
from sklearn import linear_model
df = pd.read_csv("C://Users//Public//DS DATASETS//homeprices.csv")
%matplotlib inline
import matplotlib.pyplot as plt
plt.xlabel('area(sqft)')
plt.ylabel('price(us$)')
plt.scatter(df.area, df.price, color='red',marker='+')
area = df.area.values.reshape(-1,1)
price = df.price.values.reshape(-1,1)
reg=linear_model.LinearRegression()
reg.fit(area,price)
reg.predict([[3300]])
reg.coef_
reg.intercept_
135.78767123*3300+180616.43835616
reg.predict([[5000]])



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression # Example classifier
from sklearn.metrics import confusion_matrix, accuracy_score
from matplotlib.colors import ListedColormap
# Load the dataset
dataset = pd.read_csv("C://Users// Desktop//DS DATASETS//User_Data.csv")
# Input features (Age, Estimated Salary)
x = dataset.iloc[:, [2, 3]].values
# Output variable (Purchased)
y = dataset.iloc[:, 4].values
# Split the dataset into training and test sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=0)
# Standardize the features
sc_x = StandardScaler()
x_train = sc_x.fit_transform(x_train)
x_test = sc_x.transform(x_test)
print(x_train[0:10, :])
# Train the classifier (example using Logistic Regression)
classifier = LogisticRegression(random_state=0)
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
# Calculate the confusion matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)
# Calculate accuracy
print("Accuracy:", accuracy_score(y_test, y_pred))
# Visualize the results
X_set, y_set = x_test, y_test
X1, X2 = np.meshgrid(
np.arange(start=X_set[:, 0].min() - 1, stop=X_set[:, 0].max() + 1, step=0.01),
np.arange(start=X_set[:, 1].min() - 1, stop=X_set[:, 1].max() + 1, step=0.01)
)
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
alpha=0.75, cmap=ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
c=ListedColormap(('red', 'green'))(i), label=j)
plt.title('Classifier (Test set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show()
