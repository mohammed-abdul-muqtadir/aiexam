
from sklearn.neural_network import MLPClassifier
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

iris = load_iris()
x = iris.data
y = iris.target

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42

clf = MLPClassifier(hidden_layer_sizes=(100, 50), max_iter=500, random_state=42)

clf.fit(x_train, y_train)

y_pred = clf.predict(x_test)

accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy}")
print("Confusion Matrix:")
print(conf_matrix)
print("Classification Report:")
print(classification_rep)

import nltk
nltk.download('averaged_perceptron_tagger')
nltk.download('punkt')
sentence = "the chef cooks the soup"
words = nltk.tokenize.word_tokenize(sentence)
pos_word = nltk.pos_tag(words)
print(pos_word)





from collections import defaultdict, deque
class Graph:
    def __init__(self):
        self.graph = defaultdict(list)
    def add_edge(self, u, v):
        self.graph[u].append(v)
    def bfs(self, start, goal):
        visited = set()
        queue = deque([(start, [])])
        while queue:
            node, path = queue.popleft()
            if node == goal:
                return path + [node]
            if node not in visited:
                visited.add(node)
                for neighbor in self.graph[node]:
                    queue.append((neighbor, path + [node]))
        return None
g = Graph()
g.add_edge('A', 'B')
g.add_edge('A', 'C')
g.add_edge('B', 'D')
g.add_edge('B', 'E')
g.add_edge('C', 'F')
g.add_edge('E', 'G')
g.add_edge('F', 'H')
start_node = 'A'
goal_node = 'H'
# Perform BFS search
path = g.bfs(start_node, goal_node)
if path:
    print(f"Path from {start_node} to  {goal_node}: {path}")
else:
    print(f"No path found from {start_node} to {goal_node}")

import nltk
nltk.download("punkt")
nltk.download("averaged_perceptron_tagger")
sentence = "the chef makes good food"

words = nltk.tokenize.word_tokenize(sentence)

p0s = nltk.pos_tag(words)
print(p0s)
